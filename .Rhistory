summarize(amount = sum(Amount))
g <- ggplot(d, aes(hour, amount))
g + geom_bar
g + geom_bar()
g + geom_bar(stat = "identity")
# total purchase amounts by TOD
TOD_amount <- pur %>%
mutate(purchase_l = ymd_hms(`Purchase Date Local`)) %>%
group_by(hour = hour(purchase_l)) %>%
summarize(amount = sum(Amount))
g <- ggplot(TOD_amount, aes(hour, amount))
g + geom_bar(stat = "identity")
+scale_fill_gradient(low="green", high = "red")
g + geom_bar(stat = "identity")  +scale_fill_gradient(low="green", high = "red")
g + geom_bar(stat = "identity") + scale_fill_gradient(low="green", high = "red")
g + geom_bar(stat = "identity") +
scale_fill_gradient(low="green", high = "red")
g + geom_bar(aes(fill=fl))
View(TOD_amount)
# easy conversion Far to Kelvin
# within each function you have to identify all of your arguments. The body tells it what
# to do, you put this in {}
# argument is the required input, defined here as "temp"
# the "return" is optional in R, it will auto return the last object, but it's a good habit
# you can pipe within a function
far_to_kel <- function(temp){
kelvin <- ((temp-32)*(5/9))+273.15
return(kelvin)
}
far_to_kel(0)
far_to_kel(32)
kel_to_cel(0)
kel_to_cel <- function(temp){
celcius <- (temp-273.15)
return(celcius)
}
kel_to_cel(0)
return(celcius)
kelvin <- ((temp-32)*(5/9))+273.15
celcius <- (kelvin-273.15)
# Write a function converting Far to Celcius by nesting the statements above
far_to_cel <- function(temp){
kelvin <- ((temp-32)*(5/9))+273.15
celcius <- (kelvin-273.15)
return(celcius)
}
far_to_cel(0
celcius <- (temp-273.15))
far_to_cel(0)
far_to_cel(32)
# Another way to do this
far_to_cel2 <- function(far){
cel <-  kel_to_cel(far_to_kel(far))
return(cel)
}
far_to_cel2(32)
return(cel)
far_to_cel3(32)
# Another way
far_to_cel3 <-  function(temp){
kel <- far_to_cel(temp)
cel <- kel_to_cel(kel)
return(cel)
}
far_to_cel3(32)
kel <- far_to_kel(temp)
cel <- kel_to_cel(kel)
return(cel)
# Another way
far_to_cel3 <-  function(temp){
kel <- far_to_kel(temp)
cel <- kel_to_cel(kel)
return(cel)
}
far_to_cel3(32)
# came back later to add defensive
far_to_kel <- function(temp){
if(!is.numeric(temp)){
stop("value must be numeric")
}
kelvin <- ((temp-32)*(5/9))+273.15
return(kelvin)
}
far_to_kel(NA)
far_to_kel(32)
# Defensive programming is set to allow/not allow things, ie a function that needs an
# integer, prohibiting string
# commit before changing the function
# added defensive programming to the original far_To_kel
far_to_kel2 <- function(temp){
stopifnot(is.numeric(temp))
}
kelvin <- ((temp-32)*(5/9))+273.15
return(kelvin)
}
stopifnot(is.numeric(temp))
kelvin <- ((temp-32)*(5/9))+273.15
return(kelvin)
# Defensive programming is set to allow/not allow things, ie a function that needs an
# integer, prohibiting string
# commit before changing the function
# added defensive programming to the original far_To_kel
far_to_kel2 <- function(temp){
stopifnot(is.numeric(temp))
kelvin <- ((temp-32)*(5/9))+273.15
return(kelvin)
}
far_to_kel2(32)
far_to_kel2(NA)
far_to_kel2(NA)
stopifnot(is.numeric(temp))
kel <- far_to_kel(temp)
cel <- kel_to_cel(kel)
return(cel)
# Create defensive stop for far_to_cel
far_to_cel3.1 <-  function(temp){
stopifnot(is.numeric(temp))
kel <- far_to_kel(temp)
cel <- kel_to_cel(kel)
return(cel)
}
far_to_cel3.1(32)
far_to_cel3.1(32)
# Create defensive stop for far_to_cel
far_to_cel3.1 <-  function(temp){
stopifnot(is.numeric(temp))
kel <- far_to_kel(temp)
cel <- kel_to_cel(kel)
return(cel)
}
far_to_cel3.1(32)
far_to_cel3.1(NA)
far_to_cel3.1 <-  function(temp){
if (!is.numeric(temp)) {
stop("not numeric")
}
kel <- far_to_kel(temp)
cel <- kel_to_cel(kel)
return(cel)
}
far_to_cel3.2 <-  function(temp){
if (!is.numeric(temp)) {
stop("not numeric")
}
kel <- far_to_kel(temp)
cel <- kel_to_cel(kel)
return(cel)
}
# Create defensive stop for far_to_cel
far_to_cel3.1 <-  function(temp){
stopifnot(is.numeric(temp))
kel <- far_to_kel(temp)
cel <- kel_to_cel(kel)
return(cel)
}
far_to_cel3.1(NA)
far_to_cel3.2 <-  function(temp){
if (!is.numeric(temp)) {
stop("not numeric")
}
kel <- far_to_kel(temp)
cel <- kel_to_cel(kel)
return(cel)
}
far_to_cel3.2(NA)
source("code/functions.r")
far_to_cel(32)
# error catching, if package is not installed then install it
# pacman allows for checking for an installing missing packages
if(!require("pacman")) (install.packages("pacman"));library(pacman)
# error catching, if package is not installed then install it
# pacman allows for checking for an installing missing packages
if(!require("pacman")) {install.packages("pacman")};library(pacman)
# error catching, if package is not installed then install it
# pacman allows for checking for an installing missing packages
if(!require("pacman")) {install.packages("pacman")};library(pacman)
# error catching, if package is not installed then install it
# pacman allows for checking for an installing missing packages
if(!require("pacman")) {install.packages("pacman")};library(pacman)
pacman::p_load("lubridate")
pacman::p_load("dplyr")
pacman::p_load("stringr")
pacman::p_load("readr")
download.file(u, destfile = paste0(outdir,
str_sub(u,-11)))
# function to grab data from website
get_data <- function(start, end,
base_url="https://s3.amazonaws.com/biketown-tripdata-public/",
outdir="data/biketown"){
# ^takes start and end in mm/yyyy and tries to download files
# make url function that's only available within get_data
make_url <- function(date, base_url=base_url){
url <- paste0(base_url, format(date,"%Y_%m"), ".csv")
# ^pulls the file based on the format on the website
return(url)
}
# parse date range
start_date <- lubridate::myd(start, truncated = 2)
# ^truncated takes the day out of the date
end_date  <- myd(end, truncated = 2)
date_range <- seq(start_date, end_date, by="months")
# apply functions are a concise way to build FOR LOOPS
# lapply(a, b) just applies function b to sequence a and returns a list of hte modified sequence
urls <- lapply(date_range, make_url)
# for loops can be easier for early development of code
for (u in urls) {
download.file(u, destfile = paste0(outdir,
str_sub(u,-11)))
# ^for ever url from the urls list, it will download
}
}
start = "6/2018"
end = "8/2018"
get_data(start, end)
### manual run ###
# params
start = "6/2018"
end = "8/2018"
get_data(start, end)
get_data <- function(start, end,
base_url="https://s3.amazonaws.com/biketown-tripdata-public/",
outdir="data/biketown"){
# ^takes start and end in mm/yyyy and tries to download files
# make url function that's only available within get_data
make_url <- function(date, base_url){
url <- paste0(base_url, format(date,"%Y_%m"), ".csv")
# ^pulls the file based on the format on the website
return(url)
}
# parse date range
start_date <- lubridate::myd(start, truncated = 2)
# ^truncated takes the day out of the date
end_date  <- myd(end, truncated = 2)
date_range <- seq(start_date, end_date, by="months")
# apply functions are a concise way to build FOR LOOPS
# lapply(a, b) just applies function b to sequence a and returns a list of hte modified sequence
urls <- lapply(date_range, make_url, base_url=base_url)
# for loops can be easier for early development of code
for (u in urls) {
download.file(u, destfile = paste0(outdir,
str_sub(u,-11)))
# ^for ever url from the urls list, it will download
}
}
# ^the first section of the function in the () are the parameters of the function
# ^second section in {} tells the function what to do
start = "6/2018"
end = "8/2018"
get_data(start, end)
# function to grab data from website
get_data <- function(start, end,
base_url="https://s3.amazonaws.com/biketown-tripdata-public/",
outdir="data/biketown/"){
# ^takes start and end in mm/yyyy and tries to download files
# make url function that's only available within get_data
make_url <- function(date, base_url){
url <- paste0(base_url, format(date,"%Y_%m"), ".csv")
# ^pulls the file based on the format on the website
return(url)
}
# parse date range
start_date <- lubridate::myd(start, truncated = 2)
# ^truncated takes the day out of the date
end_date  <- myd(end, truncated = 2)
date_range <- seq(start_date, end_date, by="months")
# apply functions are a concise way to build FOR LOOPS
# lapply(a, b) just applies function b to sequence a and returns a list of hte modified sequence
urls <- lapply(date_range, make_url, base_url=base_url)
# for loops can be easier for early development of code
for (u in urls) {
download.file(u, destfile = paste0(outdir,
str_sub(u,-11)))
# ^for ever url from the urls list, it will download
}
}
start = "6/2018"
end = "8/2018"
get_data(start, end)
?lapply(list, function)
?lapply
# If no end date given, set to now
end <- ifelse(is.null(end),format(now(),"%m/%Y"),end)
### manual run ###
# params
start = "11/2018"
get_data(start, end)
get_data(start, end)
get_data(start)
get_data <- function(start="7/2016", end=NULL, #adding defaults
base_url="https://s3.amazonaws.com/biketown-tripdata-public/",
outdir="data/biketown/"){
# ^takes start and end in mm/yyyy and tries to download files
# If no end date given, set to now
end <- ifelse(is.null(end),format(now(),"%m/%Y"),end)
# make url function that's only available within get_data
make_url <- function(date, base_url){
url <- paste0(base_url, format(date,"%Y_%m"), ".csv")
# ^pulls the file based on the format on the website
return(url)
}
# parse date range
start_date <- lubridate::myd(start, truncated = 2)
# ^truncated takes the day out of the date
end_date  <- myd(end, truncated = 2)
date_range <- seq(start_date, end_date, by="months")
# apply functions are a concise way to build FOR LOOPS
# lapply(a, b) just applies function b to sequence a and returns a list of hte modified sequence
urls <- lapply(date_range, make_url, base_url=base_url)
# for loops can be easier for early development of code
for (u in urls) {
download.file(u, destfile = paste0(outdir,
str_sub(u,-11)))
# ^for every url from the urls list, it will download
}
}
# ^the first section of the function in the () are the parameters of the function
# ^second section in {} tells the function what to do
### manual run ###
# params
start = "11/2018"
get_data(start)
# ^this works so I will commit
source("code/fetch_biketown.R")
get_data(start = "06/2018", end = "08/2018")
get_data2 <- function(start="7/2016", end=NULL,
base_url="https://s3.amazonaws.com/biketown-tripdata-public/",
outdir="data/biketown/"){
end <- ifelse(is.null(end),format(now(),"%m/%Y"),end)
make_url <- function(date, base_url){
url <- paste0(base_url, format(date,"%Y_%m"), ".csv")
return(url)
}
start_date <- lubridate::myd(start, truncated = 2)
end_date  <- myd(end, truncated = 2)
date_range <- seq(start_date, end_date, by="months")
urls <- lapply(date_range, make_url, base_url=base_url)
# for (u in urls) {
#   download.file(u, destfile = paste0(outdir,
#                                      str_sub(u,-11)))
}
result <- lapply(urls, function(u) {
download.file(u, destfile = paste0(outdir, str_sub(u,-11)))
})
}
get_data2 <- function(start="7/2016", end=NULL,
base_url="https://s3.amazonaws.com/biketown-tripdata-public/",
outdir="data/biketown/"){
end <- ifelse(is.null(end),format(now(),"%m/%Y"),end)
make_url <- function(date, base_url){
url <- paste0(base_url, format(date,"%Y_%m"), ".csv")
return(url)
}
start_date <- lubridate::myd(start, truncated = 2)
end_date  <- myd(end, truncated = 2)
date_range <- seq(start_date, end_date, by="months")
urls <- lapply(date_range, make_url, base_url=base_url)
# for (u in urls) {
#   download.file(u, destfile = paste0(outdir,
#                                      str_sub(u,-11)))
# }
result <- lapply(urls, function(u) {
download.file(u, destfile = paste0(outdir, str_sub(u,-11)))
})
}
get_data(start)
start = "11/2018"
get_data(start)
get_data2(start)
get_data3  <- function(start="7/2016", end=NULL,
base_url="https://s3.amazonaws.com/biketown-tripdata-public/",
outdir="data/biketown/"){
end <- ifelse(is.null(end),format(now(),"%m/%Y"),end)
make_url <- function(date, base_url){
url <- paste0(base_url, format(date,"%Y_%m"), ".csv")
return(url)
}
start_date <- lubridate::myd(start, truncated = 2)
end_date  <- myd(end, truncated = 2)
date_range <- seq(start_date, end_date, by="months")
lapply(date_range, make_url) %>%
lapply(urls, function(u) {
download.file(u, destfile = paste0(outdir, str_sub(u,-11)))
})
}
get_data3(start)
get_data3  <- function(start="7/2016", end=NULL,
base_url="https://s3.amazonaws.com/biketown-tripdata-public/",
outdir="data/biketown/"){
end <- ifelse(is.null(end),format(now(),"%m/%Y"),end)
make_url <- function(date, base_url){
url <- paste0(base_url, format(date,"%Y_%m"), ".csv")
return(url)
}
start_date <- lubridate::myd(start, truncated = 2)
end_date  <- myd(end, truncated = 2)
date_range <- seq(start_date, end_date, by="months")
lapply(date_range, make_url, base_url=base_url) %>%
lapply(urls, function(u) {
download.file(u, destfile = paste0(outdir, str_sub(u,-11)))
})
}
start = "11/2018"
get_data3(start)
?lapply
?format
format(1:10)
library(dplyr)
library(lubridate)
library(ggplot2)
str(bike_1807)
bike_1807 <- read.csv("data/biketown/2018_06.csv", stringsAsFactors = F)
str(bike_1807)
header(bike_1807)
head(bike_1807)
table(bike_1807)
str(bike_1807)
avg_dist <- bike_1807 %>%
group_by(PaymentPlan) %>%
summarise(avg_dst = mean(Distance_Miles))
View(avg_dist)
barplot(avg_dist)
?barplot
?geom_text
pm_fig <- avg_dist %>%
ggplot(aes(x = PaymentPlan, y = avg_dst))+
geom_bar(stat = "identity")+ #must use stat=identity or you get a frequency
geom_text()
pm_fig
pm_fig <- avg_dist %>%
ggplot(aes(x = PaymentPlan, y = avg_dst, fill = PaymentPlan))+
geom_bar(stat = "identity")
# ^must use stat=identity or you get a frequency
pm_fig
# ^must use stat=identity or you get a frequency
pm_fig
?round
install.packages("dt")
install.packages("DT")
library(DT)
colnames(bike_1807)
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(lubridate)
library(ggplot2)
#install.packages("DT")
library(DT)
avg_dist2 <- bike_1807 %>%
group_by(PaymentPlan), group_by(MultipleRental) %>%
View(avg_dist2)
avg_dist2 <- bike_1807 %>%
group_by(PaymentPlan), group_by(MultipleRental) %>%
View(avg_dist2)
avg_dist2 <- bike_1807 %>%
group_by(PaymentPlan), group_by(MultipleRental) %>%
View(avg_dist2)
avg_dist2 <- bike_1807 %>%
group_by(PaymentPlan,MultipleRental) %>%
summarise(avg_miles = mean(Distance_Miles))
View(avg_dist2)
pm_fig2 <- avg_dist %>%
ggplot(aes(x = PaymentPlan, y = avg_miles, fill = PaymentPlan))+
geom_bar(stat = "identity") +
# ^must use stat=identity or you get a frequency
xlab("Payment Plan") + ylab("Average Miles") +
geom_text(aes(label=round(avg_miles,1)))
pm_fig2 <- avg_dist2 %>%
ggplot(aes(x = PaymentPlan, y = avg_miles, fill = MultipleRental))+
geom_bar(position = "identity") +
# ^must use stat=identity or you get a frequency
xlab("Payment Plan") + ylab("Average Miles") +
geom_text(aes(label=round(avg_miles,1)))
pm_fig2
pm_fig2 <- avg_dist2 %>%
ggplot(aes(x = PaymentPlan, y = avg_miles2, fill = MultipleRental))+
geom_bar(position = "identity") +
# ^must use stat=identity or you get a frequency
xlab("Payment Plan") + ylab("Average Miles") +
geom_text(aes(label=round(avg_miles,1)))
pm_fig2
pm_fig2 <- avg_dist2 %>%
ggplot(aes(x = PaymentPlan, y = avg_miles2, fill = MultipleRental))+
geom_bar(position = "identity") +
# ^must use stat=identity or you get a frequency
xlab("Payment Plan") + ylab("Average Miles") +
geom_text(aes(label=round(avg_miles2,1)))
pm_fig2
avg_dist2 <- bike_1807 %>%
group_by(PaymentPlan,MultipleRental) %>%
summarise(avg_miles2 = mean(Distance_Miles))
View(avg_dist2)
pm_fig2 <- avg_dist2 %>%
ggplot(aes(x = PaymentPlan, y = avg_miles2, fill = MultipleRental))+
geom_bar(stat = "identity") +
# ^must use stat=identity or you get a frequency
xlab("Payment Plan") + ylab("Average Miles") +
geom_text(aes(label=round(avg_miles2,1)))
pm_fig2
pm_fig2
avg_dist2 <- bike_1807 %>%
group_by(PaymentPlan,MultipleRental) %>%
summarise(avg_miles2 = mean(Distance_Miles))
View(avg_dist2)
library(lubridate)
library(dplyr)
library(ggplot2)
source("code/fetch_biketown.R")
source("fetch_biketown.R")
source("code/fetch_biketown.R")
setwd("~/Desktop/R Training/plotting")
source("code/fetch_biketown.R")
setwd("~/Desktop/R Training/plotting")
source("fetch_biketown.R")
